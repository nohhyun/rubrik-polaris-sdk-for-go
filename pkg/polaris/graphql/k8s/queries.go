// Code generated by queries_gen.go DO NOT EDIT

// MIT License
//
// Copyright (c) 2021 Rubrik
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

package k8s

// getNamespaces GraphQL query
var getNamespacesQuery = `query SdkGolangGetNamespaces(
    $after: String,
    $filter: [Filter!],
    $k8sClusterId: UUID,
) {
    k8sNamespaces(
        after: $after,
        filter: $filter,
        k8sClusterId: $k8sClusterId
    ) {
        edges {
            node {
                id,
                k8sClusterID,
                namespaceName,
                isRelic,
                configuredSlaDomain{
                    id,
                    name,
                    version,
                },
                effectiveSlaDomain{
                    id,
                    name,
                    version,
                },
            }
        },
        pageInfo {
            endCursor,
            hasNextPage,
        },
        count
    }
}`

// listSla GraphQL query
var listSlaQuery = `query SdkGolangListSla(
    $after: String,
    $filter: [GlobalSlaFilterInput!]) {
    globalSlaConnection(
        after: $after,
        filter: $filter,
    ) {
        edges {
            node {
                id,
                name,
                ... on GlobalSla {
                    baseFrequency {
                        duration,
                        unit,
                    },
                    objectTypeList,
                    firstFullBackupWindows {
                        durationInHours,
                        startTimeAttributes {
                            dayOfWeek{
                                day,
                            },
                            hour,
                            minute,
                        }
                    },
                    backupWindows{
                        durationInHours,
                        startTimeAttributes {
                            dayOfWeek{
                                day,
                            },
                            hour,
                            minute,
                        }
                    },
                }
            }
        }
        pageInfo {
            endCursor,
            hasNextPage,
        },
        count,
    }
}`
