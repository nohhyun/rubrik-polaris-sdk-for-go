// Code generated by queries_gen.go DO NOT EDIT

// MIT License
//
// Copyright (c) 2021 Rubrik
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

package graphql

// AwsAccounts GraphQL query
var AwsAccountsQuery = `query SdkGolangAwsAccounts($awsNativeProtectionFeature: AwsNativeProtectionFeatureEnum = EC2, $filter: String = "") {
	awsNativeAccountConnection(awsNativeProtectionFeature: $awsNativeProtectionFeature, accountFilters: {
		nameSubstringFilter: {
			nameSubstring: $filter
		}
	}) {
		count
		edges {
			node {
				id
				regions
				status
				name
				slaAssignment
				configuredSlaDomain {
					id
					name
				}
				effectiveSlaDomain {
					id
					name
				}
			}
		}
		pageInfo {
			endCursor
			hasNextPage
		}	
	}
}`

// AwsAccountsAdd GraphQL query
var AwsAccountsAddQuery = `mutation SdkGolangAwsAccountsAdd($account_id: String!, $account_name: String!, $regions: [String!]!) {
    awsNativeProtectionAccountAdd(awsNativeProtectionAccountAddArg: {accountId: $account_id, name: $account_name, regions: $regions}) {
       cloudFormationName
       cloudFormationUrl
       cloudFormationTemplateUrl
       errorMessage
    }
}`

// AwsAccountsDeleteCommit GraphQL query
var AwsAccountsDeleteCommitQuery = `mutation SdkGolangAwsAccountsDeleteCommit($polaris_account_id: UUID!) {
    awsCloudAccountDeleteProcess(cloudAccountUuid: $polaris_account_id, awsCloudAccountDeleteProcessArg: {feature: CLOUD_NATIVE_PROTECTION}) {
        message
    }
}`

// AwsAccountsDeleteInitiate GraphQL query
var AwsAccountsDeleteInitiateQuery = `mutation SdkGolangAwsAccountsDeleteInitiate($polaris_account_id: UUID!) {
    awsCloudAccountDeleteInitiate(cloudAccountUuid: $polaris_account_id, awsCloudAccountDeleteInitiateArg: {feature: CLOUD_NATIVE_PROTECTION}) {
        cloudFormationUrl
    }
}`

// AwsAccountsDetail GraphQL query
var AwsAccountsDetailQuery = `query SdkGolangAwsAccountsDetail($filter: String = "") {
    awsCloudAccounts(awsCloudAccountsArg: {
        feature: CLOUD_NATIVE_PROTECTION,
        statusFilters: [],
        columnSearchFilter: $filter
    }) {
        awsCloudAccounts {
            awsCloudAccount {
                id
                nativeId
                message
                accountName
            }
            featureDetails {
                feature
                roleArn
                stackArn
                status
                awsRegions
            }
        }
    }
}`

// AwsAccountsDisable GraphQL query
var AwsAccountsDisableQuery = `mutation SdkGolangAwsAccountsDisable($polaris_account_id: UUID!, $delete_native_snapshots: Boolean = false, $awsNativeProtectionFeature: AwsNativeProtectionFeatureEnum = EC2) {
    deleteAwsNativeAccount(awsNativeAccountId: $polaris_account_id, deleteNativeSnapshots: $delete_native_snapshots, awsNativeProtectionFeature: $awsNativeProtectionFeature) {
        taskchainUuid
    }
}`

// AwsAccountsUpdateInitiate GraphQL query
var AwsAccountsUpdateInitiateQuery = `mutation SdkGolangAwsAccountsUpdateInitiate( $aws_native_protection_feature: [CloudAccountFeatureEnum!]!, $polaris_account_id: UUID!) {
    awsCloudAccountUpdateFeatureInitiate(features: $aws_native_protection_feature, cloudAccountUuid: $polaris_account_id) {
        cloudFormationUrl
        templateUrl
    }
}`

// CoreTaskchainStatus GraphQL query
var CoreTaskchainStatusQuery = `query SdkGolangCoreTaskchainStatus($filter: String!){
    getKorgTaskchainStatus(taskchainId: $filter){
        taskchain {
            id
            state
            taskchainUuid
            ... on Taskchain{
                progressedAt
            }
        }
    }
}`
